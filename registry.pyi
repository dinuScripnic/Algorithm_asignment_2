from __future__ import annotations

from typing import Generic
from protocols import ID

class RegistryException(Exception): ...

class Registry(Generic[ID]):
    def __init__(self):
        self.connected = {}
        ...
    def get_serialized_key(self, person_id: ID) -> str: ...
    def node_in_use(self, node_id: int) -> bool: ...
    def get_node_id(self, person_id: ID) -> int: ...
    def get_persons(self) -> list[ID]: ...
    def get_persons_at_node(self, node_id: int) -> list[ID]: ...
    def is_connected(self, person_id: ID) -> bool: ...
    def delete(self, person_id: ID) -> None: ...
    def remove_node(self, node_id: int) -> None: ...
    def insert(self, person_id: ID, node_id: ID, serialized_key: str) -> None: ...
